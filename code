import React, { useMemo, useState } from "react";

// Creator Digital Product Revenue Calculator (v1)
// Single-file React component. Tailwind CSS for styling.
// Assumptions: A launch-based model + optional upsell + platform/affiliate/refund deductions.
// You can tweak inputs on the left; results update instantly on the right.

const NumberInput = ({ label, suffix, value, onChange, step = 1, min = 0, help }) => (
  <label className="block">
    <span className="text-sm font-medium text-gray-700">{label}</span>
    <div className="mt-1 flex items-center gap-2">
      <input
        type="number"
        className="w-full rounded-2xl border border-gray-200 px-4 py-2 focus:outline-none focus:ring-2 focus:ring-indigo-500"
        value={value}
        step={step}
        min={min}
        onChange={(e) => onChange(Number(e.target.value))}
      />
      {suffix && <span className="text-gray-500 text-sm w-10 text-right">{suffix}</span>}
    </div>
    {help && <p className="mt-1 text-xs text-gray-500">{help}</p>}
  </label>
);

const presets = {
  "Starter": {
    audienceSize: 20000,
    reachRate: 25,
    clickThroughRate: 2.5,
    optInRate: 35,
    launchesPerYear: 4,
    emailConversionRate: 2.0,
    productPrice: 37,
    refundRate: 3,
    upsellTakeRate: 15,
    upsellPrice: 27,
    affiliatePct: 0,
    platformFeePct: 5
  },
  "Growing": {
    audienceSize: 100000,
    reachRate: 30,
    clickThroughRate: 3.5,
    optInRate: 38,
    launchesPerYear: 6,
    emailConversionRate: 2.2,
    productPrice: 47,
    refundRate: 3,
    upsellTakeRate: 18,
    upsellPrice: 37,
    affiliatePct: 10,
    platformFeePct: 3
  },
  "Established": {
    audienceSize: 350000,
    reachRate: 35,
    clickThroughRate: 4.5,
    optInRate: 40,
    launchesPerYear: 8,
    emailConversionRate: 2.5,
    productPrice: 67,
    refundRate: 2,
    upsellTakeRate: 22,
    upsellPrice: 47,
    affiliatePct: 15,
    platformFeePct: 3
  }
};

function formatCurrency(n) {
  if (Number.isNaN(n)) return "-";
  return n.toLocaleString(undefined, { style: "currency", currency: "USD", maximumFractionDigits: 0 });
}

function pct(n) {
  if (Number.isNaN(n)) return "-";
  return `${n.toFixed(1)}%`;
}

export default function CreatorRevenueCalculator() {
  const [inputs, setInputs] = useState({ ...presets["Starter"] });
  const [activePreset, setActivePreset] = useState("Starter");

  const update = (k, v) => setInputs((s) => ({ ...s, [k]: v }));

  const {
    audienceSize,
    reachRate,
    clickThroughRate,
    optInRate,
    launchesPerYear,
    emailConversionRate,
    productPrice,
    refundRate,
    upsellTakeRate,
    upsellPrice,
    affiliatePct,
    platformFeePct
  } = inputs;

  const calc = useMemo(() => {
    // Top-of-funnel
    const reached = audienceSize * (reachRate / 100);
    const clicks = reached * (clickThroughRate / 100);
    const leads = clicks * (optInRate / 100);

    // Launch math per launch
    const buyers = leads * (emailConversionRate / 100);
    const grossBase = buyers * productPrice;

    // Upsell
    const upsellBuyers = buyers * (upsellTakeRate / 100);
    const grossUpsell = upsellBuyers * upsellPrice;

    // Refunds & fees
    const grossAll = grossBase + grossUpsell;
    const refunds = grossAll * (refundRate / 100);
    const afterRefunds = grossAll - refunds;
    const affiliateCosts = afterRefunds * (affiliatePct / 100);
    const platformFees = afterRefunds * (platformFeePct / 100);
    const netPerLaunch = afterRefunds - affiliateCosts - platformFees;

    // Annualized
    const annualNet = netPerLaunch * launchesPerYear;

    return {
      reached, clicks, leads, buyers,
      grossBase, grossUpsell, grossAll,
      refunds, affiliateCosts, platformFees,
      netPerLaunch, annualNet
    };
  }, [inputs]);

  const applyPreset = (name) => {
    setActivePreset(name);
    setInputs({ ...presets[name] });
  };

  const stat = (label, value, sub) => (
    <div className="rounded-2xl bg-white ring-1 ring-gray-100 p-4 shadow-sm">
      <div className="text-xs uppercase tracking-wide text-gray-500">{label}</div>
      <div className="mt-1 text-xl font-semibold">{value}</div>
      {sub && <div className="mt-1 text-xs text-gray-500">{sub}</div>}
    </div>
  );

  return (
    <div className="min-h-screen w-full bg-gradient-to-b from-gray-50 to-white p-6">
      <div className="mx-auto max-w-6xl">
        <header className="mb-6 flex flex-col md:flex-row md:items-end md:justify-between gap-4">
          <div>
            <h1 className="text-2xl md:text-3xl font-bold">Creator Digital Product Revenue Calculator</h1>
            <p className="text-gray-600 mt-1">Model a launch-based funnel with optional upsell, fees, and refunds. Adjust assumptions to see net revenue per launch and per year.</p>
          </div>
          <div className="flex items-center gap-2">
            {Object.keys(presets).map((p) => (
              <button
                key={p}
                onClick={() => applyPreset(p)}
                className={`rounded-2xl px-3 py-2 text-sm font-medium border ${(activePreset===p)?'bg-indigo-600 text-white border-indigo-600':'bg-white text-gray-800 border-gray-200 hover:border-indigo-200'}`}
              >
                {p}
              </button>
            ))}
          </div>
        </header>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {/* Inputs */}
          <section className="rounded-3xl bg-white p-5 ring-1 ring-gray-100 shadow-sm">
            <h2 className="text-lg font-semibold mb-4">Inputs</h2>
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
              <NumberInput label="Audience size" value={audienceSize} onChange={(v)=>update('audienceSize', v)} help="Total followers/subscribers across your main platform(s)." />
              <NumberInput label="Average reach per launch" suffix="%" value={reachRate} onChange={(v)=>update('reachRate', v)} step={0.1} help="What % of the audience typically sees the promo." />

              <NumberInput label="Click-through rate (reach → page)" suffix="%" value={clickThroughRate} onChange={(v)=>update('clickThroughRate', v)} step={0.1} />
              <NumberInput label="Opt-in rate (page → email)" suffix="%" value={optInRate} onChange={(v)=>update('optInRate', v)} step={0.1} />

              <NumberInput label="Email conversion rate (buyers)" suffix="%" value={emailConversionRate} onChange={(v)=>update('emailConversionRate', v)} step={0.1} />
              <NumberInput label="Launches per year" value={launchesPerYear} onChange={(v)=>update('launchesPerYear', v)} />

              <NumberInput label="Core product price" value={productPrice} onChange={(v)=>update('productPrice', v)} step={1} />
              <NumberInput label="Refund rate" suffix="%" value={refundRate} onChange={(v)=>update('refundRate', v)} step={0.1} />

              <NumberInput label="Upsell take-rate" suffix="%" value={upsellTakeRate} onChange={(v)=>update('upsellTakeRate', v)} step={0.1} help="% of buyers who also take the upsell." />
              <NumberInput label="Upsell price" value={upsellPrice} onChange={(v)=>update('upsellPrice', v)} step={1} />

              <NumberInput label="Affiliate share" suffix="%" value={affiliatePct} onChange={(v)=>update('affiliatePct', v)} step={0.1} help="% of net-after-refunds paid to affiliates." />
              <NumberInput label="Platform fees" suffix="%" value={platformFeePct} onChange={(v)=>update('platformFeePct', v)} step={0.1} help="Payment processor/platform % after refunds (e.g., Stripe, Gumroad)." />
            </div>
          </section>

          {/* Outputs */}
          <section className="rounded-3xl bg-white p-5 ring-1 ring-gray-100 shadow-sm">
            <h2 className="text-lg font-semibold mb-4">Results</h2>

            <div className="grid grid-cols-2 md:grid-cols-4 gap-3 mb-4">
              {stat("People reached", calc.reached.toLocaleString(), pct(reachRate) + " of audience")}
              {stat("Clicks to page", calc.clicks.toLocaleString(), pct(clickThroughRate) + " of reached")}
              {stat("Leads (emails)", calc.leads.toLocaleString(), pct(optInRate) + " of clicks")}
              {stat("Buyers", Math.round(calc.buyers).toLocaleString(), pct(emailConversionRate) + " of leads")}
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
              <div className="rounded-2xl bg-gray-50 p-4">
                <div className="text-sm font-medium text-gray-700 mb-2">Per Launch</div>
                <ul className="space-y-1 text-sm">
                  <li className="flex justify-between"><span>Gross (core)</span><span>{formatCurrency(calc.grossBase)}</span></li>
                  <li className="flex justify-between"><span>Gross (upsell)</span><span>{formatCurrency(calc.grossUpsell)}</span></li>
                  <li className="flex justify-between border-t pt-1"><span>Total Gross</span><span>{formatCurrency(calc.grossAll)}</span></li>
                  <li className="flex justify-between"><span>Refunds</span><span>-{formatCurrency(calc.refunds)}</span></li>
                  <li className="flex justify-between"><span>Affiliate payouts</span><span>-{formatCurrency(calc.affiliateCosts)}</span></li>
                  <li className="flex justify-between"><span>Platform/processor fees</span><span>-{formatCurrency(calc.platformFees)}</span></li>
                  <li className="flex justify-between text-lg font-semibold border-t pt-2"><span>Net revenue per launch</span><span>{formatCurrency(calc.netPerLaunch)}</span></li>
                </ul>
              </div>

              <div className="rounded-2xl bg-gray-50 p-4">
                <div className="text-sm font-medium text-gray-700 mb-2">Annualized</div>
                <ul className="space-y-1 text-sm">
                  <li className="flex justify-between"><span>Launches per year</span><span>{launchesPerYear}</span></li>
                  <li className="flex justify-between text-lg font-semibold border-t pt-2"><span>Estimated annual net</span><span>{formatCurrency(calc.annualNet)}</span></li>
                </ul>
              </div>
            </div>

            <div className="mt-4 text-xs text-gray-500">
              <p>Notes: This is a directional model, not a forecast. Real-world performance varies with list quality, offer-market fit, and promo strategy.</p>
            </div>
          </section>
        </div>

        {/* What-if quick toggles */}
        <section className="mt-6 rounded-3xl bg-white p-5 ring-1 ring-gray-100 shadow-sm">
          <h3 className="text-base font-semibold mb-3">What-if toggles</h3>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-2">
            <button onClick={() => update('emailConversionRate', Math.max(0, emailConversionRate + 0.5))} className="rounded-2xl px-3 py-2 border border-gray-200 hover:border-indigo-200">+0.5% Email conversion</button>
            <button onClick={() => update('optInRate', Math.max(0, optInRate + 2))} className="rounded-2xl px-3 py-2 border border-gray-200 hover:border-indigo-200">+2% Opt-in rate</button>
            <button onClick={() => update('upsellTakeRate', Math.max(0, upsellTakeRate + 2))} className="rounded-2xl px-3 py-2 border border-gray-200 hover:border-indigo-200">+2% Upsell take-rate</button>
          </div>
        </section>

        {/* Footer */}
        <footer className="mt-8 text-center text-xs text-gray-500">
          Built for creators & partners to scope revenue potential of digital products (courses, ebooks, templates, workshops). v1 • Edit assumptions to fit your funnel.
        </footer>
      </div>
    </div>
  );
}
